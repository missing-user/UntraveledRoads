/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE
 */
(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === "object" && typeof module === "object") module.exports = factory(); else if (typeof define === "function" && define.amd) define([], factory); else if (typeof exports === "object") exports["autoInit"] = factory(); else root["mdc"] = root["mdc"] || {}, 
    root["mdc"]["autoInit"] = factory();
})(this, function() {
    return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
            }
            var module = installedModules[moduleId] = {
                i: moduleId,
                l: false,
                exports: {}
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.l = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports, name, getter) {
            if (!__webpack_require__.o(exports, name)) {
                Object.defineProperty(exports, name, {
                    configurable: false,
                    enumerable: true,
                    get: getter
                });
            }
        };
        __webpack_require__.n = function(module) {
            var getter = module && module.__esModule ? function getDefault() {
                return module["default"];
            } : function getModuleExports() {
                return module;
            };
            __webpack_require__.d(getter, "a", getter);
            return getter;
        };
        __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 103);
    }({
        103: function(module, exports, __webpack_require__) {
            "use strict";
            var __values = this && this.__values || function(o) {
                var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
                if (m) return m.call(o);
                return {
                    next: function next() {
                        if (o && i >= o.length) o = void 0;
                        return {
                            value: o && o[i++],
                            done: !o
                        };
                    }
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var constants_1 = __webpack_require__(104);
            var AUTO_INIT_ATTR = constants_1.strings.AUTO_INIT_ATTR, AUTO_INIT_STATE_ATTR = constants_1.strings.AUTO_INIT_STATE_ATTR, INITIALIZED_STATE = constants_1.strings.INITIALIZED_STATE;
            var registry = {};
            var CONSOLE_WARN = console.warn.bind(console);
            function emit(evtType, evtData, shouldBubble) {
                if (shouldBubble === void 0) {
                    shouldBubble = false;
                }
                var evt;
                if (typeof CustomEvent === "function") {
                    evt = new CustomEvent(evtType, {
                        bubbles: shouldBubble,
                        detail: evtData
                    });
                } else {
                    evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);
                }
                document.dispatchEvent(evt);
            }
            function mdcAutoInit(root) {
                if (root === void 0) {
                    root = document;
                }
                var e_1, _a;
                var components = [];
                var nodes = [].slice.call(root.querySelectorAll("[" + AUTO_INIT_ATTR + "]"));
                nodes = nodes.filter(function(node) {
                    return node.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE;
                });
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var node = nodes_1_1.value;
                        var ctorName = node.getAttribute(AUTO_INIT_ATTR);
                        if (!ctorName) {
                            throw new Error("(mdc-auto-init) Constructor name must be given.");
                        }
                        var Constructor = registry[ctorName];
                        if (typeof Constructor !== "function") {
                            throw new Error("(mdc-auto-init) Could not find constructor in registry for " + ctorName);
                        }
                        var component = Constructor.attachTo(node);
                        Object.defineProperty(node, ctorName, {
                            configurable: true,
                            enumerable: false,
                            value: component,
                            writable: false
                        });
                        components.push(component);
                        node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                emit("MDCAutoInit:End", {});
                return components;
            }
            exports.mdcAutoInit = mdcAutoInit;
            mdcAutoInit.register = function(componentName, Constructor, warn) {
                if (warn === void 0) {
                    warn = CONSOLE_WARN;
                }
                if (typeof Constructor !== "function") {
                    throw new Error("(mdc-auto-init) Invalid Constructor value: " + Constructor + ". Expected function.");
                }
                var registryValue = registry[componentName];
                if (registryValue) {
                    warn("(mdc-auto-init) Overriding registration for " + componentName + " with " + Constructor + ". Was: " + registryValue);
                }
                registry[componentName] = Constructor;
            };
            mdcAutoInit.deregister = function(componentName) {
                delete registry[componentName];
            };
            mdcAutoInit.deregisterAll = function() {
                var keys = Object.keys(registry);
                keys.forEach(this.deregister, this);
            };
            exports.default = mdcAutoInit;
        },
        104: function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.strings = {
                AUTO_INIT_ATTR: "data-mdc-auto-init",
                AUTO_INIT_STATE_ATTR: "data-mdc-auto-init-state",
                INITIALIZED_STATE: "initialized"
            };
        }
    });
});
//# sourceMappingURL=mdc.autoInit.js.map