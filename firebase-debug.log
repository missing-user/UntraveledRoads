[debug] [2019-08-20T02:03:06.082Z] ----------------------------------------------------------------------
[debug] [2019-08-20T02:03:06.083Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\Philipp\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js deploy
[debug] [2019-08-20T02:03:06.084Z] CLI Version:   7.2.2
[debug] [2019-08-20T02:03:06.084Z] Platform:      win32
[debug] [2019-08-20T02:03:06.084Z] Node Version:  v10.16.0
[debug] [2019-08-20T02:03:06.084Z] Time:          Mon Aug 19 2019 19:03:06 GMT-0700 (Pacific Daylight Time)
[debug] [2019-08-20T02:03:06.084Z] ----------------------------------------------------------------------
[debug] 
[debug] [2019-08-20T02:03:06.089Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2019-08-20T02:03:06.090Z] > authorizing via signed-in user
[debug] [2019-08-20T02:03:06.090Z] [iam] checking project untraveledroads-d9377 for permissions ["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasedatabase.instances.update","firebasehosting.sites.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create"]
[debug] [2019-08-20T02:03:06.091Z] > refreshing access token with scopes: ["email","https://www.googleapis.com/auth/cloud-platform","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","openid"]
[debug] [2019-08-20T02:03:06.091Z] >>> HTTP REQUEST POST https://www.googleapis.com/oauth2/v3/token  
 <request body omitted>
[debug] [2019-08-20T02:03:06.228Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:06.232Z] >>> HTTP REQUEST POST https://cloudresourcemanager.googleapis.com/v1/projects/untraveledroads-d9377:testIamPermissions  

[debug] [2019-08-20T02:03:06.418Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:06.419Z] >>> HTTP REQUEST GET https://firebase.googleapis.com/v1beta1/projects/untraveledroads-d9377  
 
[debug] [2019-08-20T02:03:06.653Z] <<< HTTP RESPONSE 200
[info] 
[info] === Deploying to 'untraveledroads-d9377'...
[info] 
[info] i  deploying database, storage, firestore, functions, hosting
[info] Running command: npm --prefix "$RESOURCE_DIR" run lint
[info] +  functions: Finished running predeploy script.
[info] i  database: checking rules syntax...
[debug] [2019-08-20T02:03:09.162Z] >>> HTTP REQUEST PUT https://untraveledroads-d9377.firebaseio.com/.settings/rules.json?dryRun=true  
 {
  "rules": {
    // Admin access.
    ".read": "auth.token.admin === true",
    ".write": "auth.token.admin === true",
    "admins": {
      ".read": "false",  // Only a cloud function or admins can update this.
      ".write": "false",  // Only a cloud function or admins can update this.
      "$index": {
        "email": {
          ".validate": "newData.isString()"
        }
      }
    },
    // User's personnal feeds.
    "feed": {
      "$uid": {
        ".read": "auth.uid === $uid",
        ".write": "auth.uid === $uid",
        "$postId": {
          ".validate": "newData.val() === true && newData.parent().parent().parent().child('posts').child($postId).exists()"
        }
      }
    },
    // List of all Posts.
    "posts": {
      ".read": true,
      ".indexOn": ["author/uid", "timestamp"], // Allow searching for posts by authors. Useful for deletion.
      "$postId": {
        ".write": "!data.exists() || data.exists() && auth.uid === data.child('author').child('uid').val()", // Allow new writes and allow updates and deletes to own posts.
        ".validate": "newData.child('author').child('uid').exists() && newData.child('text').exists()",
        "text": {
          ".validate": "newData.isString() && newData.val().length < 2000"
        },
        "timestamp": {
          ".validate": "newData.val() === now"
        },
        "client": {
          ".validate": "newData.val() === 'web' || newData.val() === 'ios' || newData.val() === 'android'"
        },
        "sanitized": {
          ".validate": "false" // Only a cloud function (admin mode) can update this.
        },
        "moderated": {
          ".validate": "false" // Only a cloud function (admin mode) can update this.
        },
        "author": {
          "uid": {
            ".validate": "auth.uid === newData.val()"
          },
          "full_name": {
            ".validate": "auth.token.name === newData.val() || (auth.token.name === null && newData.val() === 'Anonymous')"
          },
          "profile_picture": {
            ".validate": "true"
          }
        }
      }
    },
    // Post's comments.
    "comments": {
      ".read": true,
      "$postId": {
        ".indexOn": "author/uid", // Allow searching for comments by authors. Useful for deletion.
        ".write": "!newData.exists() && auth.uid === root.child('posts').child($postId).child('author').child('uid').val() && !newData.parent().parent().child('posts').child($postId).exists()", // Allow deletes from the post owner
        ".validate": "root.child('posts').child($postId).exists()", // Check that the post exists
        "$commentId": {
          ".write": "(!data.exists() || data.exists() && auth.uid === data.child('author').child('uid').val()) && (root.child('blocked').child(auth.uid).child(root.child('posts').child($postId).child('author').child('uid').val()).val() !== true)", // Can write new comments and edit/delete particular comment if you are the author.
          "text": {
            ".validate": "newData.isString() && newData.val().length < 2000"
          },
          "sanitized": {
            ".validate": "false" // Only a cloud function (admin mode) can update this.
          },
          "moderated": {
            ".validate": "false" // Only a cloud function (admin mode) can update this.
          },
          "timestamp": {
            ".validate": "newData.val() === now"
          },
          "author": {
            "uid": {
              ".validate": "auth.uid === newData.val()"
            },
            "full_name": {
              ".validate": "auth.token.name === newData.val() || (auth.token.name === null && newData.val() === 'Anonymous')"
            },
            "profile_picture": {
              ".validate": "true"
            },
            "$other": {
              ".validate": false
            }
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },
    // Hashtag index.
    "hashtags": {
      ".read": true,
      ".write": false
    },
    // List of post's likes.
    "likes": {
      ".read": true,
      "$postId": {
        ".write": "!newData.exists() && auth.uid === root.child('posts').child($postId).child('author').child('uid').val() && !newData.parent().parent().child('posts').child($postId).exists()", // Allow deletes from the post owner
        ".validate": "root.child('posts').child($postId).exists()", // Check that the post exists
        "$uid": {
          ".write": "auth.uid === $uid",
          ".validate": "newData.val() === now"
        }
      }
    },
    // List of followers.
    "followers": {
      ".read": true,
      "$followedUid": {
        "$followerUid": {
          ".write": "auth.uid === $followerUid", // Can only add yourself as a follower
          ".validate": "newData.val() === true && newData.parent().parent().parent().child('people').child($followerUid).child('following').child($followedUid).exists()" // Makes sure /people/.../following is in sync
        }
      }
    },
    // Public profile information.
    "people": {
      ".indexOn": ["_search_index/full_name", "_search_index/reversed_full_name"],
      ".read": true,
      "$uid": {
        ".write": "auth.uid === $uid",
        "full_name": {
          ".validate": "auth.token.name === newData.val() || (auth.token.name === null && newData.val() === 'Anonymous')"
        },
        "profile_picture": {
          ".validate": "true"
        },
        "posts": {
          "$postId": {
            ".validate": "newData.val() === true && newData.parent().parent().parent().parent().child('posts').child($postId).exists()"
          }
        },
        "_search_index": {
          "full_name": {
            ".validate": "newData.isString()"
          },
          "reversed_full_name": {
            ".validate": "newData.isString()"
          }
        },
        "following": {
          "$followedUid": {
            ".validate": "newData.parent().parent().parent().parent().child('followers').child($followedUid).child($uid).val() === true" // Makes sure /followers is in sync
          }
        }
      }
    },
    // List of blocked users.
    "blocking": {
      "$blockerUid": {
        ".write": "auth.uid === $blockerUid", // Can only add yourself as a blocker
        ".read": "auth.uid === $blockerUid",
        "$blockedUid": {
          ".read": "auth.uid === $blockedUid",
          ".validate": "newData.val() === true && newData.parent().parent().parent().child('blocked').child($blockedUid).child($blockerUid).exists()" // Makes sure /blocked is in sync
        }
      }
    },
    // List of blocking users.
    "blocked": {
      "$blockedUid": {
        ".read": "auth.uid === $blockedUid",
        "$blockerUid": {
          ".read": "auth.uid === $blockerUid",
          ".write": "auth.uid === $blockerUid", // Can only add yourself as a blocker
          ".validate": "newData.val() === true && newData.parent().parent().parent().child('blocking').child($blockerUid).child($blockedUid).exists()" // Makes sure /blocker is in sync
        }
      }
    },
    // List of flagged posts.
    "postFlags": {
      "$postId": {
        ".validate": "root.child('posts').child($postId).exists()", // Check that the post exists
        "$uid": {
          ".write": "auth.uid === $uid",
          ".read": "auth.uid === $uid",
          ".validate": "newData.val() === true"
        }
      }
    },
    // List of flagged comments.
    "commentFlags": {
      "$postId": {
        ".validate": "root.child('posts').child($postId).exists()", // Check that the post exists
        "$commentId": {
          ".validate": "root.child('comments').child($postId).child($commentId).exists()", // Check that the comment exists
          "$uid": {
            ".write": "auth.uid === $uid",
            ".read": "auth.uid === $uid",
            ".validate": "newData.val() === true"
          }
        }
      }
    },
    // Privacy settings
    "privacy": {
      "$uid": {
        ".write": "auth.uid === $uid",
        ".read": "auth.uid === $uid",
        "data_processing": {
          ".validate": "newData.isBoolean()"
        },
        "content": {
          ".validate": "newData.isBoolean()"
        },
        "social": {
          ".validate": "newData.isBoolean()"
        },
        "$other": {
          ".validate": "false"
        }
      }
    },
    // Disallow all other attributes.
    "$other": {
      ".validate": false
    }
  }
}

[debug] [2019-08-20T02:03:09.467Z] <<< HTTP RESPONSE 200
[info] +  database: rules syntax for database untraveledroads-d9377 is valid
[debug] [2019-08-20T02:03:09.469Z] >>> HTTP REQUEST GET https://appengine.googleapis.com/v1/apps/untraveledroads-d9377  
 
[debug] [2019-08-20T02:03:10.072Z] <<< HTTP RESPONSE 200
[info] i  storage: checking storage.rules for compilation errors...
[debug] [2019-08-20T02:03:10.074Z] >>> HTTP REQUEST POST https://firebaserules.googleapis.com/v1/projects/untraveledroads-d9377:test  

[debug] [2019-08-20T02:03:10.436Z] <<< HTTP RESPONSE 200
[info] +  storage: rules file storage.rules compiled successfully
[info] i  firestore: checking firestore.rules for compilation errors...
[info] i  firestore: reading indexes from firestore.indexes.json...
[debug] [2019-08-20T02:03:10.438Z] >>> HTTP REQUEST POST https://firebaserules.googleapis.com/v1/projects/untraveledroads-d9377:test  

[debug] [2019-08-20T02:03:10.745Z] <<< HTTP RESPONSE 200
[info] +  firestore: rules file firestore.rules compiled successfully
[debug] [2019-08-20T02:03:10.747Z] > [functions] package.json contents: {
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint .",
    "serve": "firebase serve --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "8"
  },
  "dependencies": {
    "firebase-admin": "^8.0.0",
    "firebase-functions": "^3.1.0"
  },
  "devDependencies": {
    "eslint": "^5.12.0",
    "eslint-plugin-promise": "^4.0.1",
    "firebase-functions-test": "^0.1.6"
  },
  "private": true
}
[info] i  functions: ensuring necessary APIs are enabled...
[debug] [2019-08-20T02:03:10.747Z] >>> HTTP REQUEST GET https://serviceusage.googleapis.com/v1/projects/untraveledroads-d9377/services/cloudfunctions.googleapis.com  
 
[debug] [2019-08-20T02:03:10.747Z] >>> HTTP REQUEST GET https://serviceusage.googleapis.com/v1/projects/untraveledroads-d9377/services/runtimeconfig.googleapis.com  
 
[debug] [2019-08-20T02:03:11.218Z] <<< HTTP RESPONSE 200
[info] +  functions: all necessary APIs are enabled
[debug] [2019-08-20T02:03:11.234Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:11.234Z] >>> HTTP REQUEST GET https://firebase.googleapis.com/v1beta1/projects/untraveledroads-d9377/adminSdkConfig  
 
[debug] [2019-08-20T02:03:11.360Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:11.361Z] >>> HTTP REQUEST POST https://firebasehosting.googleapis.com/v1beta1/sites/untraveledroads-d9377/versions  

[debug] [2019-08-20T02:03:13.207Z] <<< HTTP RESPONSE 200
[info] i  storage: uploading rules storage.rules...
[debug] [2019-08-20T02:03:13.208Z] >>> HTTP REQUEST POST https://firebaserules.googleapis.com/v1/projects/untraveledroads-d9377/rulesets  

[debug] [2019-08-20T02:03:13.543Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:13.544Z] [rules] created ruleset projects/untraveledroads-d9377/rulesets/e895a636-6143-49fc-85ac-1430d9f9a2a3
[info] i  firestore: uploading rules firestore.rules...
[debug] [2019-08-20T02:03:13.545Z] >>> HTTP REQUEST POST https://firebaserules.googleapis.com/v1/projects/untraveledroads-d9377/rulesets  

[debug] [2019-08-20T02:03:13.545Z] >>> HTTP REQUEST GET https://firestore.googleapis.com/v1beta2/projects/untraveledroads-d9377/databases/(default)/collectionGroups/-/indexes  
 
[debug] [2019-08-20T02:03:13.682Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:13.682Z] [rules] created ruleset projects/untraveledroads-d9377/rulesets/eee75b02-42c2-4c7f-b4c6-da128b13baec
[debug] [2019-08-20T02:03:13.988Z] <<< HTTP RESPONSE 200
[debug] [2019-08-20T02:03:13.989Z] >>> HTTP REQUEST GET https://firestore.googleapis.com/v1beta2/projects/untraveledroads-d9377/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false  
 
[debug] [2019-08-20T02:03:14.420Z] <<< HTTP RESPONSE 200
[info] +  firestore: deployed indexes in firestore.indexes.json successfully
[info] i  functions: preparing functions directory for uploading...
[debug] [2019-08-20T02:03:14.422Z] >>> HTTP REQUEST GET https://runtimeconfig.googleapis.com/v1beta1/projects/untraveledroads-d9377/configs  
 
[debug] [2019-08-20T02:03:14.820Z] <<< HTTP RESPONSE 200
[info] i  hosting[untraveledroads-d9377]: beginning deploy...
